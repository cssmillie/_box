# Basic script for filtering OTU tables

import argparse
import pandas as pd
import numpy as np
from util import *

def parse_args():
    # parse command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', default='', help='input file')
    parser.add_argument('-o', default='', help='output file')
    parser.add_argument('--row_regex', default='', help='keep rows that match regex')
    parser.add_argument('--col_regex', default='', help='keep cols that match regex')
    parser.add_argument('--transpose', default=False, action='store_true', help='transpose otu table')
    parser.add_argument('--pseudocount', default=np.nan, type=float, help='add pseudocount')
    parser.add_argument('--norm', default=False, action='store_true', help='normalize')
    parser.add_argument('--log', default=False, action='store_true', help='log transform')
    parser.add_argument('-a', default=np.nan, type=float, help='lower threshold')
    parser.add_argument('-b', default=np.nan, type=float, help='upper threshold')
    parser.add_argument('--max_below_a', default=np.nan, type=float, help='max number of samples for which otu abundance < a')
    parser.add_argument('--min_above_a', default=np.nan, type=float, help='min number of samples for which otu abundance > a')
    parser.add_argument('--max_above_b', default=np.nan, type=float, help='max number of samples for which otu abundance > b')
    parser.add_argument('--min_median', default=np.nan, type=float, help='min_median < median < max_median')
    parser.add_argument('--max_median', default=np.nan, type=float, help='min_med < median < max_med')
    parser.add_argument('--min_total', default=np.nan, type=float, help='remove otu if (total abundance) < min_total')
    parser.add_argument('--top', default=np.nan, type=float, help='select most abundant otus (fraction or int)')
    parser.add_argument('--sort', default=False, action='store_true', help='numeric sort by first column')
    args = parser.parse_args()
    return args


def fmessage(data, text):
    message(text + ', shape = (%d, %d)' %(len(data.index), len(data.columns)))


def filter_otu_table(args, data):
    # filter otu table

    # filter by regex
    if args.row_regex:
        data = data.ix[[bool(re.search(args.row_regex, ri)) for ri in data.index], :]
    if args.col_regex:
        data = data.ix[:, [bool(re.search(args.col_regex, ci)) for ci in data.columns]]
    # transpose
    if args.transpose:
        data = data.transpose()
        fmessage(data, '--transpose: transposing otu table')
    # add pseudocount
    if pd.notnull(args.pseudocount):
        data = data + args.pseudocount
        fmessage(data, '--pseudocount: adding %f to otu table' %(args.pseudocount))
    # calculate detection limit (for log)
    log_zero = 1./(2*max(data.sum(axis=1)))
    # normalize
    if args.norm:
        data = data.div(data.sum(axis=1), axis=0)
        fmessage(data, '--norm: normalizing rows of otu table')
    # log transform
    if args.log:
        fmessage(data, '--log: adding .5*(detection limit) = %f' %(log_zero))
        data = np.log(data + log_zero)
        fmessage(data, '--log: applying log transform')
    # get a,b
    if pd.isnull(args.a):
        args.a = min(data)
        print data.min().min()
    if pd.isnull(args.b):
        args.b = min(data)
    # filter by f <= a
    if pd.notnull(args.a) and pd.notnull(args.max_below_a):
        if args.max_below_a > 1:
            args.max_below_a = 1.*args.max_below_a/len(data.index)
        data = data.ix[:, (1.*(data <= args.a).sum(axis=0) / len(data.index)) < args.max_below_a]
        fmessage(data, '-a %f --max_below_a %f: filtering by minimum abundance' %(args.a, args.max_below_a))
    # filter by f > a
    if pd.notnull(args.a) and pd.notnull(args.min_above_a):
        if args.min_above_a > 1:
            args.min_above_a = 1.*args.min_above_a/len(data.index)
        data = data.ix[:, (1.*(data > args.a).sum(axis=0) / len(data.index)) > args.min_above_a]
        fmessage(data, '-a %f --min_above_a %f: filtering by minimum abundance' %(args.a, args.min_above_a))
    # filter by f >= b
    if pd.notnull(args.b) and pd.notnull(args.max_above_b):
        if args.max_above_b > 1:
            args.max_above_b = 1.*args.max_above_b/len(data.index)
        data = data.ix[:, (1.*(data >= args.b).sum(axis=0) / len(data.index)) < args.max_above_b]
        fmessage(data, '-b %f --max_above_b %f: filtering by maximum abundance' %(args.b, args.max_above_b))
    # filter by median
    if pd.notnull(args.min_median):
        data = data.ix[:, data.median(axis=0) >= args.min_median]
        fmessage(data, '--min_med %f: filtering by median abundance' %(args.min_median))
    if pd.notnull(args.max_median):
        data = data.ix[:, data.median(axis=0) <= args.max_median]
        fmessage(data, '--max_med %f: filtering by maximum abundance' %(args.max_median))
    # filter by total
    if pd.notnull(args.min_total):
        data = data.ix[:, data.sum(axis=0) >= args.min_total]
        fmessage(data, '--min_total %f: filtering by total abundance' %(args.min_total))
    # select most abundant otus
    if pd.notnull(args.top):
        if args.top < 1:
            data = data.ix[:, data.median(axis=0).order(ascending=False)[:int(args.top*len(data.index))].index]
            fmessage(data, '--args.top %f: selecting top %f otus' %(args.top))
        elif args.top > 1:
            data = data.ix[:, data.median(axis=0).order(ascending=False)[:int(args.top)].index]
            fmessage(data, '--args.top %d: selecting top %d otus' %(args.top))
    if args.sort == True:
        data.index = data.index.astype(int)
        data = data.sort_index()
    return data


def write_output(args, data):
    # write table as tab-delimited file
    data.to_csv(args.o, sep='\t')


args = parse_args()

if __name__ == '__main__':
    # load input as pandas dataframe
    data = 1.*read_dataframe(args.i)
    fmessage(data, 'loading %s as dataframe' %(args.i))
    data = filter_otu_table(args, data)
    write_output(args, data)
